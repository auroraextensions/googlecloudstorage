<?php if ($this->isEnabled()): ?>
<script>
    const cdnUrl   = '<?= $this->getMediaUrl() ?>';
    const mediaUrl = '<?= $this->getBaseMediaUrl() ?>';

    var replacedImages = [];

    document.addEventListener('error', (event) => {
        if (event.target.tagName.toLowerCase() !== 'img') return;
        const url = event.target.src.split('?')[0];
        if (replacedImages.includes(url)) return;
        replacedImages.push(url);
        event.target.src = url.replace(cdnUrl, mediaUrl) + '?imgstore=<?= $this->getStoreCode() ?>';

        if(event.target.offsetParent?.tagName.toLowerCase() == 'picture') {
            const sources = event.target.offsetParent.querySelectorAll('source');
            sources.forEach(function(source) {
                let url = source.srcset.split('?')[0];
                if (replacedImages.includes(url)) return;
                replacedImages.push(url);
                source.srcset = url.replace(cdnUrl, mediaUrl) + '?imgstore=<?= $this->getStoreCode() ?>';
            });
        }
    }, {
        capture: true,
        once: false,
        passive: true
    });

    // Only run the mage/gallery require on product page
    if (document.body.classList.contains('catalog-product-view')) {
        require(['jquery', 'mage/gallery/gallery'], function($, gallery){

            $('[data-gallery-role=gallery-placeholder]').on('gallery:loaded', async function () {
                const api = $(this).data('gallery');
                const images = $('[data-gallery-role=gallery-placeholder]').data('gallery').fotorama.data;
                console.log(images)

                const checkIfImageExists = (url, callback) => {
                    const img = new Image();
                    img.src = url;

                    if (img.complete) {
                        callback(true);
                    } else {
                        img.onload = () => {
                            callback(true);
                        };

                        img.onerror = () => {
                            callback(false);
                        };
                    }
                }

                let replacedGalleryImages = [];
                const checkAllImages = () => {
                    images.forEach(image => {
                        checkIfImageExists(image.img, (exists) => {
                            if (!exists) {
                                image.img = image.img.replace(cdnUrl, mediaUrl) + '?imgstore=<?= $this->getStoreCode() ?>';
                                image.thumb = image.img;
                            }
                            replacedGalleryImages.push(image);
                        });
                    });
                }
                await checkAllImages();
                setTimeout(() => {
                    api.updateData(replacedGalleryImages)
                }, 5000);
            });
        });
    }
</script>
<?php endif; ?>
